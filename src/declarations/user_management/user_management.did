type Wallet = 
 record {
   createdAt: int;
   euroBalance: nat;
   icpBalance: nat;
   isLocked: bool;
   lastTransactionAt: int;
   nairaBalance: nat;
   owner: principal;
   totalTransactions: nat;
   usdBalance: nat;
 };
type UserRole = 
 variant {
   buyer;
   seller;
 };
type User = 
 record {
   authMethod: AuthMethod;
   bio: opt text;
   company: opt text;
   email: text;
   firstName: text;
   id: text;
   joinedAt: int;
   kycStatus: KYCStatus;
   kycSubmittedAt: opt int;
   lastActive: int;
   lastName: text;
   location: opt text;
   phone: opt text;
   principalId: text;
   profilePicture: opt blob;
   role: opt UserRole;
   verified: bool;
   walletAddress: text;
   website: opt text;
 };
type TransactionType = 
 variant {
   deposit;
   escrow;
   payment;
   refund;
   transfer;
   withdrawal;
 };
type TransactionStatus = 
 variant {
   cancelled;
   completed;
   failed;
   pending;
 };
type Transaction = 
 record {
   amount: nat;
   completedAt: opt int;
   createdAt: int;
   fromPrincipal: principal;
   id: text;
   memo: opt text;
   status: TransactionStatus;
   toPrincipal: principal;
   tokenType: TokenType;
   transactionType: TransactionType;
 };
type TokenType = 
 variant {
   Euro;
   ICP;
   Naira;
   USD;
 };
type Result_4 = 
 variant {
   err: text;
   ok: nat;
 };
type Result_3 = 
 variant {
   err: text;
   ok: Wallet;
 };
type Result_2 = 
 variant {
   err: text;
   ok;
 };
type Result_1 = 
 variant {
   err: text;
   ok: text;
 };
type Result = 
 variant {
   err: text;
   ok: User;
 };
type KYCStatus = 
 variant {
   completed;
   inReview;
   pending;
   rejected;
 };
type AuthMethod = 
 variant {
   internetIdentity;
   nfid;
 };
service : {
  addFunds: (amount: nat, tokenType: TokenType) -> (Result_2);
  getBalance: (tokenType: TokenType) -> (Result_4);
  getCurrentUser: () -> (Result);
  getMigrationStatus: () -> (record {
                               isComplete: bool;
                               version: nat;
                             }) query;
  getProfilePicture: () -> (opt blob);
  getTotalUsers: () -> (nat) query;
  getTransaction: (txId: text) -> (opt Transaction) query;
  getTransactionHistory: () -> (vec Transaction);
  getUserByPrincipal: ("principal": principal) -> (opt User) query;
  getUserCountByRole: () -> (vec record {
                                   UserRole;
                                   nat;
                                 }) query;
  getUserStats: () ->
   (record {
      kycCompleted: nat;
      kycInReview: nat;
      kycPending: nat;
      kycRejected: nat;
      totalTransactions: nat;
      totalUsers: nat;
      totalWallets: nat;
      verifiedUsers: nat;
    }) query;
  getUsersByRole: (role: UserRole) -> (vec User) query;
  getWallet: () -> (Result_3);
  getWalletStats: () ->
   (record {
      totalIcpLocked: nat;
      totalTransactions: nat;
      totalUsdLocked: nat;
      totalWallets: nat;
    }) query;
  healthCheck: () ->
   (record {
      status: text;
      timestamp: int;
      userCount: nat;
      walletCount: nat;
    }) query;
  registerUser: (authMethod: AuthMethod, firstName: text, lastName: text,
   email: text, phone: opt text, profilePicture: opt blob) -> (Result);
  setUserRole: (role: UserRole, bio: opt text, location: opt text, company:
   opt text, website: opt text) -> (Result);
  setWalletLock: (owner: principal, isLocked: bool) -> (Result_2);
  transfer: (to: principal, amount: nat, tokenType: TokenType, memo:
   opt text) -> (Result_1);
  updateKYCStatus: (status: KYCStatus) -> (Result);
  updateProfile: (firstName: text, lastName: text, email: text, phone:
   opt text, bio: opt text, location: opt text, company: opt text, website:
   opt text) -> (Result);
  updateProfilePicture: (profilePicture: blob) -> (Result);
  userExists: () -> (bool);
  validateSession: () -> (Result);
}
