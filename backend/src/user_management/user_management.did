// backend/src/user_management/user_management.did

type UserRole = variant {
  buyer;
  seller;
};

type KYCStatus = variant {
  pending;
  inReview;
  completed;
  rejected;
};

type AuthMethod = variant {
  nfid;
  internetIdentity;
};

type TokenType = variant {
  ICP;
  USD;
  Naira;
  Euro;
};

type TransactionType = variant {
  transfer;
  deposit;
  withdrawal;
  escrow;
  payment;
  refund;
};

type TransactionStatus = variant {
  pending;
  completed;
  failed;
  cancelled;
};

type User = record {
  id: text;
  principalId: text;
  firstName: text;
  lastName: text;
  email: text;
  phone: opt text;
  profilePicture: opt blob;
  role: opt UserRole;
  authMethod: AuthMethod;
  kycStatus: KYCStatus;
  kycSubmittedAt: opt int;
  verified: bool;
  walletAddress: text;
  bio: opt text;
  location: opt text;
  company: opt text;
  website: opt text;
  joinedAt: int;
  lastActive: int;
};

type Wallet = record {
  owner: principal;
  icpBalance: nat;
  usdBalance: nat;
  nairaBalance: nat;
  euroBalance: nat;
  createdAt: int;
  lastTransactionAt: int;
  isLocked: bool;
  totalTransactions: nat;
};

type Transaction = record {
  id: text;
  fromPrincipal: principal;
  toPrincipal: principal;
  amount: nat;
  tokenType: TokenType;
  transactionType: TransactionType;
  status: TransactionStatus;
  createdAt: int;
  completedAt: opt int;
  memo: opt text;
};

type UserStats = record {
  totalUsers: nat;
  verifiedUsers: nat;
  kycPending: nat;
  kycInReview: nat;
  kycCompleted: nat;
  kycRejected: nat;
  totalWallets: nat;
  totalTransactions: nat;
};

type WalletStats = record {
  totalWallets: nat;
  totalTransactions: nat;
  totalIcpLocked: nat;
  totalUsdLocked: nat;
};

type HealthCheck = record {
  status: text;
  timestamp: int;
  userCount: nat;
  walletCount: nat;
};

type MigrationStatus = record {
  version: nat;
  isComplete: bool;
};

type Result_User = variant {
  ok: User;
  err: text;
};

type Result_Text = variant {
  ok: text;
  err: text;
};

type Result_Nat = variant {
  ok: nat;
  err: text;
};

type Result_Unit = variant {
  ok;
  err: text;
};

type Result_Wallet = variant {
  ok: Wallet;
  err: text;
};

service : {
  // User registration and profile management
  registerUser: (AuthMethod, text, text, text, opt text, opt blob) -> (Result_User);
  setUserRole: (UserRole, opt text, opt text, opt text, opt text) -> (Result_User);
  getCurrentUser: () -> (Result_User);
  updateProfile: (text, text, text, opt text, opt text, opt text, opt text, opt text) -> (Result_User);
  updateProfilePicture: (blob) -> (Result_User);
  updateKYCStatus: (KYCStatus) -> (Result_User);
  
  // Integrated wallet functionality
  getWallet: () -> (Result_Wallet);
  getBalance: (TokenType) -> (Result_Nat);
  transfer: (principal, nat, TokenType, opt text) -> (Result_Text);
  addFunds: (nat, TokenType) -> (Result_Unit);
  getTransactionHistory: () -> (vec Transaction);
  getTransaction: (text) -> (opt Transaction) query;
  setWalletLock: (principal, bool) -> (Result_Unit);
  
  // Session management
  validateSession: () -> (Result_User);
  userExists: () -> (bool);
  getProfilePicture: () -> (opt blob);
  
  // Query functions
  getUsersByRole: (UserRole) -> (vec User) query;
  getUserByPrincipal: (principal) -> (opt User) query;
  getTotalUsers: () -> (nat) query;
  getUserCountByRole: () -> (vec record { UserRole; nat }) query;
  getUserStats: () -> (UserStats) query;
  getWalletStats: () -> (WalletStats) query;
  healthCheck: () -> (HealthCheck) query;
  getMigrationStatus: () -> (MigrationStatus) query;
}