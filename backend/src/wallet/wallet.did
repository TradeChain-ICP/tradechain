// backend/src/wallet/wallet.did

type TokenType = variant {
  ICP;
  USD;
  Naira;
  Euro;
};

type TransactionType = variant {
  transfer;
  deposit;
  withdrawal;
  escrow;
  payment;
  refund;
};

type TransactionStatus = variant {
  pending;
  completed;
  failed;
  cancelled;
};

type Wallet = record {
  owner: principal;
  icpBalance: nat;
  usdBalance: nat;
  nairaBalance: nat;
  euroBalance: nat;
  createdAt: int;
  lastTransactionAt: int;
  isLocked: bool;
  totalTransactions: nat;
};

type Transaction = record {
  id: text;
  fromPrincipal: principal;
  toPrincipal: principal;
  amount: nat;
  tokenType: TokenType;
  transactionType: TransactionType;
  status: TransactionStatus;
  createdAt: int;
  completedAt: opt int;
  memo: opt text;
};

type WalletStats = record {
  totalWallets: nat;
  totalTransactions: nat;
  totalIcpLocked: nat;
  totalUsdLocked: nat;
};

type HealthCheck = record {
  status: text;
  timestamp: int;
  walletCount: nat;
};

type Result_Wallet = variant {
  ok: Wallet;
  err: text;
};

type Result_Text = variant {
  ok: text;
  err: text;
};

type Result_Nat = variant {
  ok: nat;
  err: text;
};

type Result_Unit = variant {
  ok;
  err: text;
};

service : {
  // Wallet management
  createWallet: () -> (Result_Wallet);
  getWallet: () -> (Result_Wallet);
  getBalance: (TokenType) -> (Result_Nat);
  
  // Transactions
  transfer: (principal, nat, TokenType, opt text) -> (Result_Text);
  addFunds: (nat, TokenType) -> (Result_Unit);
  getTransactionHistory: () -> (vec Transaction);
  getTransaction: (text) -> (opt Transaction) query;
  
  // Admin functions
  setWalletLock: (principal, bool) -> (Result_Unit);
  
  // Statistics and health
  getWalletStats: () -> (WalletStats) query;
  healthCheck: () -> (HealthCheck) query;
}